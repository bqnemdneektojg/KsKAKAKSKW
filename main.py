# ---- –ò–º–ø–æ—Ä—Ç –ú–æ–¥—É–ª–µ–π ---- #
import asyncio
import smtplib
from sendinblue import SendinBlue
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from aiogram.dispatcher import FSMContext
from aiocryptopay.const import InvoiceStatus
from aiogram.utils.exceptions import Throttled
from aiocryptopay import AioCryptoPay, Networks
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
# --- –ò–º–ø–æ—Ä—Ç –ö–æ–Ω—Ñ–∏–≥–æ–≤ --- #
from config import *
from states import *
from bomber import *
from database import *
from keyboards import *
# --- –°–æ–µ–¥–∏–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂–∫–∏ --- #

crypto = AioCryptoPay(token=CRYPTOPAY_TOKEN, network=Networks.MAIN_NET)
storage = MemoryStorage()
bot = Bot(token=TOKEN, parse_mode='html')
dp = Dispatcher(bot, storage=storage)
# --- SendinBlue --- #
sendinblue = SendinBlue(api_key='YOUR_SENDINBLUE_API_KEY'
# --- –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç --- #
@dp.message_handler(commands=['start'])
@dp.throttled(anti_flood, rate=1)
async def start(message: types.Message):
    await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAEJjSlkoEihmAAB4-w84tUzDBjiLWxsvewAAmQ6AALgo4IH_LAjcdV4gS0vBA')
    if not Users.user_exists(message.from_user.id):

# --- –†–∞–∑–±–æ—Ä admin --- #
await message.answer(f'''<b>üï∑Ô∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ BuddiesMailer!
<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º:</i></b>''', reply_markup=start_keyboard(message.from_user.id))

@dp.message_handler(text='ü•∑ –ê–¥–º–∏–Ω–∫–∞')
@dp.throttled(anti_flood, rate=1)
async def admin(message: types.Message):
    if message.from_user.id in aids:
        await message.answer(f'''<b>ü•∑ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ:</b> <code>{Users.get_users_count()}</code>
<b>ü§µüèº‚Äç‚ôÇÔ∏è –° –¥–æ—Å—Ç—É–ø–æ–º:</b> <code>{Users.get_subs_count()}</code>


@dp.message_handler(text='üï∏Ô∏è –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é')
async def open_menu(message: types.Message):
    await message.answer('<b>üîØ –ú–µ–Ω—é:</b>', reply_markup=menu_keyboard(message.from_user.id))

dp.callback_query_handler(text='üê¶‚Äç‚¨õ –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–æ')
@dp.throttled(anti_flood, rate=1)
async def bomber(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    if not Users.have_sub(callback_query.from_user.id):
        await callback_query.message.answer(f'<b>‚úñÔ∏è –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–ø–ª–∞—Ç–∏—Ç–µ –¥–æ—Å—Ç—É–ø!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))
    else:
        if
async def sendm(query: CallbackQuery, state: FSMContext):
    await query.message.answer('üï∏Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è')
    await state.set_state(BotState.sender)

@dp.message(BotState.sender)
async def san(message: Message, state: FSMContext):
    await state.update_data(send=message.text)
    await message.answer('üï∑Ô∏è –í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É –ø–æ–ª—É—á–∞—Ç–µ–ª—è')
    await state.set_state(BotState.recp)

@dp.message(BotState.recp)
async def rec(message: Message, state: FSMContext):
    await state.update_data(recp=message.text)
    await message.answer('‚úñÔ∏è –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è')
    await state.set_state(BotState.subject)

@dp.message(BotState.subject)
async def sub(message: Message, state: FSMContext):
    await state.update_data(subj=message.text)
    await message.answer('üê¶‚Äç‚¨õ –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è')
    await state.set_state(BotState.text)

@dp.message(BotState.text)
async def txt(message: Message, state: FSMContext):
    await state.update_data(text=message.text)
    data = await state.get_data()
   try:
      mail.send_mail(sendermail=data['send'], recpmail=data['recp'], mailsubject=data['subj'], text=data['text'])
    except Exception as exc:
        await message.answer(f"‚úñÔ∏è –ü–∏—Å—å–º–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. {exc}")
        return
    await state.clear()
    await message.answer('ü•∑ –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!')


          # --- –ü—Ä–æ—Ñ–∏–ª—å --- #
@dp.callback_query_handler(text='profile')
@dp.throttled(anti_flood, rate=1)
async def profile(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    if not Users.have_sub(callback_query.from_user.id):
        await callback_query.message.answer(f'''<b>üï∏Ô∏è ID:</b> <code>{callback_query.from_user.id}</code>

<b>üï∑Ô∏è –î–æ—Å—Ç—É–ø:</b> <code>–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç</code>''', reply_markup=menu_keyboard(callback_query.from_user.id))
    else:
        await callback_query.message.answer(f'''<b>üï∏Ô∏è ID:</b> <code>{callback_query.from_user.id}</code>

<b>üï∑Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤:</b> <code>{Users.sub_until(callback_query.from_user.id)}</code>''', reply_markup=menu_keyboard(callback_query.from_user.id))

        # --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è --- #
@dp.callback_query_handler(text='information')
@dp.throttled(anti_flood, rate=1)
async def information(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

    await callback_query.message.answer(f'''<b>ü•∑ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: @MDMA_NUXACH
üï∏Ô∏è –ö–∞–Ω–∞–ª —Å –Ω–æ–≤–æ—Å—Ç—è–º–∏: @BuddiesMailer</b>''', reply_markup=menu_keyboard(callback_query.from_user.id))

@dp.callback_query_handler(text='back')
@dp.throttled(anti_flood, rate=1)
async def back(callback_query: types.CallbackQuery):
    await callback_query.message.delete()

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á—Ç –Ω–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å --- #
dp.callback_query_handler(text='takesub')
@dp.throttled(anti_flood, rate=1)
async def takesub(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in aids:
        await callback_query.message.answer('<b>


    await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAEJjSlkoEihmAAB4-w84tUzDBjiLWxsvewAAmQ6AALgo4IH_LAjcdV4gS0vBA')
    await callback_query.message.answer(f'''<b>üï∑Ô∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ BuddiesMailer!
<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º:</i></b>''', reply_markup=start_keyboard(message.from_user.id))


@dp.callback_query_handler(text_startswith='check_cryptobot:')
@dp.throttled(anti_flood, rate=1)
async def check_cryptobot(callback_query: types.CallbackQuery):
    if not Users.have_sub(callback_query.from_user.id):
        invoices = await crypto.get_invoices(invoice_ids=callback_query.data.split(':')[1])
        if invoices[0].status == InvoiceStatus.PAID:
            await callback_query.message.delete()
            Users.give_sub(callback_query.from_user.id, int(callback_query.data.split(':')[2]))


            await callback_query.message.answer(f'<b>üí£ –î–æ—Å—Ç—É–ø –æ–ø–ª–∞—á–µ–Ω. –ü—Ä–∏—è—Ç–Ω—ã—Ö –ø–∏—Å–µ–º!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))
        elif invoices[0].status == InvoiceStatus.ACTIVE:
            await callback_query.answer(f'‚úñÔ∏è  –î–æ—Å—Ç—É–ø –Ω–µ –æ–ø–ª–∞—á–µ–Ω!')
        else:
            await callback_query.message.delete()
            await callback_query.message.answer(f'<b>üï∏Ô∏è –ü–ª–∞—Ç—ë–∂ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω!</b>', reply_markup=menu_keyboard(callback_query.from_user.id))
    else:
        await callback_query.message.answer(f'<b>üê¶‚Äç‚¨õ –£ –≤–∞—Å —É–∂–µ –∏–º–µ–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏:</b>', reply_markup=menu_keyboard(callback_query.from_user.id))



@dp.callback_query_handler(text='dump')
@dp.throttled(anti_flood, rate=1)
async def dump(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in aids:
        await bot.send_document(callback_query.from_user.id, open('bot.db', 'rb'))

@dp.callback_query_handler(text='mail')
@dp.throttled(anti_flood, rate=1)
async def mail(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in aids:
        await Mail.photo.set()
        await callback_query.message.answer('''<b>üé© –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ —Ä–∞—Å—Å—ã–ª–∫–∏

<i>–î–ª—è –ø—Ä–æ–ø—É—Å–∫–∞ –Ω–∞–ø–∏—à–∏—Ç–µ "-"</i></b>''')

@dp.message_handler(content_types=['photo'], state=Mail.photo)
async def mail2(message: types.Message, state: FSMContext):
    if message.from_user.id in aids:
        async with state.proxy() as data:
            try:
                data['photo'] = message.photo[0].file_id
            except:
                data['photo'] = None
        
        await Mail.next()
        await message.answer('''<b>ü•∑ –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏

<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ "HTML"</i></b>''')

@dp.message_handler(state=Mail.photo)
async def mail2(message: types.Message, state: FSMContext):
    if message.from_user.id in aids:
        async with state.proxy() as data:
            try:
                data['photo'] = message.photo[0].file_id
            except:
                data['photo'] = None
        
        await Mail.next()
        await message.answer('''<b>üï∏Ô∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏

<i>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–∑–º–µ—Ç–∫–∏ "HTML"</i></b>''')

@dp.message_handler(state=Mail.description)
async def mail3(message: types.Message, state: FSMContext):
    if message.from_user.id in aids:
        async with state.proxy() as data:
            data['description'] = message.text 

            g, e = 0, 0
            for user in Users.get_users():
                try:
                    await bot.send_photo(user.UID, data['photo'], data['description'], parse_mode='html')
                    g += 1
                except:
                    try:
                        await bot.send_message(user.UID, data['description'], parse_mode='html')
                        g += 1
                    except:
                        e += 1

        await state.finish()
        await message.answer(f'''<b>‚è± –†–∞—Å—Å—ã–ª–∫–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!

üï∑Ô∏è –ü–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b> <code>{g}</code>
<b>üï∑Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–∏:</b> <code>{e}</code>''', reply_markup=admin_keyboard())

@dp.callback_query_handler(text='givesub')
@dp.throttled(anti_flood, rate=1)
async def givesub(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in aids:
        await callback_query.message.answer('<b>üï∏Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –¥–æ—Å—Ç—É–ø:</b>', reply_markup=cancel_keyboard())
        await GiveSub.id.set()

@dp.callback_query_handler(text='takesub')
@dp.throttled(anti_flood, rate=1)
async def takesub(callback_query: types.CallbackQuery):
    if callback_query.from_user.id in aids:
        await callback_query.message.answer('<b>üï∏Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–∞—Ç—å –¥–æ—Å—Ç—É–ø:</b>', reply_markup=cancel_keyboard())
        await TakeSub.id.set()

@dp.message_handler(state=GiveSub.id)
async def givesub2(message: types.Message, state: FSMContext):
    if message.from_user.id in aids:
        async with state.proxy() as data:
            data['id'] = int(message.text)
        
        await message.answer('<b>üê¶‚Äç‚¨õ –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ—Å—Ç—É–ø–∞:</b>', reply_markup=cancel_keyboard())
        await GiveSub.next()

@dp.message_handler(state=GiveSub.days)
async def givesub3(message: types.Message, state: FSMContext):
    if message.from_user.id in aids:
        async with state.proxy() as data:
            data['days'] = int(message.text)
            id = data['id']
            days = data['days']
        
        Users.give_sub(id, days)
        await bot.send_message(id, f'<b>üï∑Ô∏è –í–∞–º –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø –Ω–∞</b> <code>{days}</code> <b>–¥–Ω–µ–π!</b>', reply_markup=start_keyboard(message.from_user.id))
        await state.finish()
        await message.answer('<b>üï∑Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–¥–∞–Ω –¥–æ—Å—Ç—É–ø!</b>', reply_markup=admin_keyboard())

@dp.message_handler(state=TakeSub.id)
async def takesub2(message: types.Message, state: FSMContext):
    if message.from_user.id in aids:
        async with state.proxy() as data:
            data['id'] = int(message.text)
            id = data['id']
        
        Users.take_sub(id)
        await bot.send_message(id, f'<b>‚úñÔ∏è –£ –≤–∞—Å –∑–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç—É–ø!</b>', reply_markup=start_keyboard(message.from_user.id))
        await state.finish()
        await message.answer('<b>üï∑Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–±—Ä–∞–ª–∏ –¥–æ—Å—Ç—É–ø!</b>', reply_markup=admin_keyboard())

@dp.message_handler(text='‚úñÔ∏è –û—Ç–º–µ–Ω–∞', state='*')
@dp.throttled(anti_flood, rate=1)
async def cancel(message: types.Message, state: FSMContext):
    await state.finish()
    await bot.send_sticker(message.from_user.id, 'CAACAgIAAxkBAAEJjSlkoEihmAAB4-w84tUzDBjiLWxsvewAAmQ6AALgo4IH_LAjcdV4gS0vBA')
    await message.answer(f'''<b>üï∑Ô∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é –≤ BuddiesMailer!
<i>–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏, —á—Ç–æ–±—ã —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º</i></b>''', reply_markup=start_keyboard(message.from_user.id))



if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
